% \iffalse meta-comment
% !TeX program  = XeLaTeX
% !TeX encoding = UTF-8
%<*internal>
\iffalse
%</internal>
%<*readme>
apfontspec
==========

The `apfontspec` package provides an similar interface to `fontspec`
package for loading CJK fonts in [ApLaTeX](https://github.com/clerkma/ptex-ng).

Basic Usage
-----------
The package provides the following commands to define a CJK font family:

    \setCJKmainfont{<font name>}[<font options>]
    \setCJKsansfont{<font name>}[<font options>]
    \setCJKmonofont{<font name>}[<font options>]
    \setCJKfamilyfont{<font family>}{<font name>}[<font options>]
    \newCJKfontfamily\<font switch>{<font name>}[<font options>]
    \CJKfontspec{<font name>}[<font options>]
    \defaultCJKfontfeatures{<default font options>}
    \addCJKfontfeatures{<font options to add>}

You can read the package manual (in Chinese) for more detailed explanations.

Contributing
------------

[Issues](https://github.com/CTeX-org/apfontspec/issues) and
[pull requests](https://github.com/CTeX-org/apfontspec/pulls)
are always welcome.

Copyright and Licence
---------------------

    Copyright (C) 2020 by Qing Lee <sobenlee@gmail.com>
    -----------------------------------------------------------------

    This work may be distributed and/or modified under the
    conditions of the LaTeX Project Public License, either
    version 1.3c of this license or (at your option) any later
    version. This version of this license is in
       http://www.latex-project.org/lppl/lppl-1-3c.txt
    and the latest version of this license is in
       http://www.latex-project.org/lppl.txt
    and version 1.3 or later is part of all distributions of
    LaTeX version 2005/12/01 or later.

    This work has the LPPL maintenance status "maintained".

    The Current Maintainer of this work is Qing Lee.

    This package consists of the file  apfontspec.dtx,
                 and the derived files apfontspec.pdf,
                                       apfontspec.sty,
                                       apfontspec.ins and
                                       README.md (this file).
%</readme>
%<*internal>
\fi
\begingroup
  \def\temp{LaTeX2e}
\expandafter\endgroup\ifx\temp\fmtname\else
\csname fi\endcsname
%</internal>
%<*install>

\input ctxdocstrip %

\preamble

    Copyright (C) 2020 by Qing Lee <sobenlee@gmail.com>
-----------------------------------------------------------------

    This work may be distributed and/or modified under the
    conditions of the LaTeX Project Public License, either
    version 1.3c of this license or (at your option) any later
    version. This version of this license is in
       http://www.latex-project.org/lppl/lppl-1-3c.txt
    and the latest version of this license is in
       http://www.latex-project.org/lppl.txt
    and version 1.3 or later is part of all distributions of
    LaTeX version 2005/12/01 or later.

    This work has the LPPL maintenance status "maintained".

    The Current Maintainer of this work is Qing Lee.

-----------------------------------------------------------------

\endpreamble

\postamble

    This work consists of the file  apfontspec.dtx,
              and the derived files apfontspec.pdf,
                                    apfontspec.sty,
                                    apfontspec.ins and
                                    README.md.
\endpostamble

\generate
  {
%</install>
%<*internal>
    \usedir{source/uplatex/apfontspec}
    \file{apfontspec.ins} {\from{\jobname.dtx}{install}}
%</internal>
%<*install>
    \usedir{tex/uplatex/apfontspec}
    \file{apfontspec.sty} {\from{\jobname.dtx}{package}}
    \nopreamble\nopostamble
    \usedir{doc/uplatex/apfontspec}
    \file{apfs-test.tex}  {\from{\jobname.dtx}{test}}
    \file{README.md}      {\from{\jobname.dtx}{readme}}
  }

\endbatchfile
%</install>
%<*internal>
\fi
%</internal>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\RequirePackage{expl3}
%<+package>\GetIdInfo$Id$
%<package>  {CJK Font Selection for ApLaTeX}
%<package>\ProvidesExplPackage{\ExplFileName}
%<package>  {\ExplFileDate}{0}{\ExplFileDescription}
%<*driver>
\documentclass{ctxdoc}
\ExplSyntaxOn
\DeclareDocumentCommand \gitsha { m }
  {
    \href { https \c_colon_str //github.com/CTeX-org/apfontspec/commit/#1 }
          { rev. ~ \texttt{#1} }
  }
\ExplSyntaxOff
\begin{document}
  \DocInput{\jobname.dtx}
  \IndexLayout
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{923}
% \GetFileId{apfontspec.sty}
%
% \title{\bfseries\pkg{apfontspec} 宏包}
% \author{李清}
% \date{\ExplFileDate\thanks{\gitsha{\ExplFileVersion}.}}
% \maketitle
%
%
% \begin{abstract}
%
% \pkg{apfontspec} 宏包提供了 \ApLaTeX 格式下的比较方便的 CJK 字体设置界面。
% 界面的语法形式与 \pkg{fontspec} 宏包类似。
%
% \end{abstract}
%
% \begin{documentation}
%
% \end{documentation}
%
%
% \StopEventually{}
%
%
%\begin{implementation}
%
% \section{代码实现}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=apfs>
%    \end{macrocode}
%
%    \begin{macrocode}
\prop_gput:Nnn \g_msg_module_name_prop { apfs } { apfontspec }
%    \end{macrocode}
%
% 检查是否为 \ApLaTeX。
%    \begin{macrocode}
\msg_new:nnn { apfs } { aptex-required }
  {
    The~apfontspec~package~requires~engine~ApTeX.\\\\
    You~must~change~your~typesetting~engine~to~`aplatex'.\\
    Loading~apfontspec~will~abort!
  }
\cs_if_exist:NF \ngbanner
  { \msg_critical:nn { apfs } { aptex-required } }
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage { xparse }
%    \end{macrocode}
%
% \begin{variable}[int]{\l_@@_tmp_tl}
% 临时变量。
%    \begin{macrocode}
\tl_new:N \l_@@_tmp_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\apfs_nfss_declare_family:nnn,
% \apfs_nfss_declare_shape:nnnnnn}
% \pkg{NFSS} 字体命令的宏包内部函数。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_nfss_declare_family:nnn
  { \DeclareKanjiFamily }
\cs_new_protected:Npn \apfs_nfss_declare_shape:nnnnnn
  { \DeclareFontShape@ }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\apfs_define:n, \apfs_set:n,
%  \apfs_set_filter:nn, \apfs_set_features:n,
%  \apfs_set_size_features:n, \apfs_set_groups:nn}
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_define:n
  { \keys_define:nn { apfs } }
\cs_new_protected:Npn \apfs_set:n
  { \keys_set:nn { apfs } }
\cs_new_protected:Npn \apfs_set_filter:nn
  { \keys_set_filter:nnn { apfs } }
\cs_new_protected:Npn \apfs_set_filter:nnN
  { \keys_set_filter:nnnN { apfs } }
\cs_new_protected:Npn \apfs_set_features:n
  { \keys_set_filter:nnn { apfs } { main , fontname } }
\cs_new_protected:Npn \apfs_set_size_features:n
  { \keys_set_filter:nnn { apfs } { main , size } }
\cs_new_protected:Npn \apfs_set_groups:nn
  { \keys_set_groups:nnn { apfs } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_error:nx   { \msg_error:nnx   { apfs } }
\cs_new_protected:Npn \@@_warning:n  { \msg_warning:nn  { apfs } }
\cs_new_protected:Npn \@@_warning:nn { \msg_warning:nnn { apfs } }
\cs_new_protected:Npn \@@_msg_new:nn { \msg_new:nnn     { apfs } }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}[int]{\c_@@_prefix_tl}
% 保存字体前缀，固定为 |ot:|。
%    \begin{macrocode}
\tl_const:Nn \c_@@_prefix_tl { ot: }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_yoko_encoding_tl,\l_@@_tate_encoding_tl}
% 保存横排与直排字体的 \pkg{NFSS} 编码名字，初始化为 |JY2| 和 |JT2|。
%    \begin{macrocode}
\tl_new:N \l_@@_yoko_encoding_tl
\tl_new:N \l_@@_tate_encoding_tl
\tl_set:Nn \l_@@_yoko_encoding_tl { JY2 }
\tl_set:Nn \l_@@_tate_encoding_tl { JT2 }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_yoko_font_tl,\l_@@_tate_font_tl}
% 保存横排与直排字体的文件名。
%    \begin{macrocode}
\tl_new:N \l_@@_yoko_font_tl
\tl_new:N \l_@@_tate_font_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_gsub_feature_prop,\g_@@_gsub_feature_prop}
% 保存 GSUB 特性。
%    \begin{macrocode}
\prop_new:N \l_@@_gsub_feature_prop
\prop_new:N \g_@@_gsub_feature_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_yoko_gsub_feature_clist,
% \l_@@_tate_gsub_feature_clist}
% 保存横排与直排字体的 GSUB 特性标签。
%    \begin{macrocode}
\clist_new:N \l_@@_yoko_gsub_feature_clist
\clist_new:N \l_@@_tate_gsub_feature_clist
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{NFSSEncoding}
% 设置字体的 \pkg{NFSS} 编码名字。
%    \begin{macrocode}
\apfs_define:n
  {
    NFSSEncoding   .code:n = \@@_assign:nn { encoding } {#1} ,
    NFSSEncoding .groups:n = main
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{NFSSFamily}
% 设置字体的 \pkg{NFSS} 族名。
%    \begin{macrocode}
\apfs_define:n
  {
    NFSSFamily .tl_set:N = \l_@@_family_tl ,
    NFSSFamily .groups:n = family
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Font}
% 用于实现 \opt{FontFace} 和 \opt{SizeFeatures} 选项中的 \opt{Font}。
%    \begin{macrocode}
\apfs_define:n
  {
    Font .tl_set:N = \l_@@_fontname_tl ,
    Font .groups:n = fontname
  }
\cs_new_protected:Npn \@@_extract_fontname:n
  {
    \tl_clear:N \l_@@_fontname_tl
    \apfs_set_groups:nn { fontname }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\apfs_new_feature:nn}
% 定义字体选项，有横排和直排字体两种形式。|#1| 是选项名称，|#2| 用于命名内部 tl 变量。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_new_feature:nn #1#2
  {
    \tl_new:c { l_@@_yoko_ #2 _tl }
    \tl_new:c { l_@@_tate_ #2 _tl }
    \apfs_define_feature:nn {#1} {#2}
  }
\cs_new_protected:Npn \apfs_define_feature:nn #1#2
  {
    \apfs_define:n
      {
        #1   .code:n = \@@_assign:nn {#2} { ##1 } ,
        #1 .groups:n = feature
      }
  }
\cs_new_protected:Npn \apfs_new_feature_code:nnn #1#2#3
  {
    \tl_new:c { l_@@_yoko_ #2 _tl }
    \tl_new:c { l_@@_tate_ #2 _tl }
    \apfs_define:n
      {
        #1   .code:n = #3 ,
        #1 .groups:n = feature
      }
  }
\cs_new_protected:Npn \apfs_new_feature_group:nnnn #1#2#3
  {
    \apfs_define:n
      {
        #1    .code:n = \@@_save_gsub_feature:nnn {#3} {#1} { ##1 } ,
        #1  .groups:n = feature ,
        #1 .default:n = {#2}
      }
    \@@_new_feature_prop:cn { g_@@_ #1 _feature_prop }
  }
\cs_new_protected:Npn \@@_new_feature_prop:Nn #1
  {
    \prop_new:N #1
    \prop_gset_from_keyval:Nn #1
  }
\cs_generate_variant:Nn \@@_new_feature_prop:Nn { c }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Index,Scale,JFM,Extension,LoadingSetting}
% 设置 \file{.ttc} 字体的索引。
%    \begin{macrocode}
\apfs_new_feature:nn { Index }          { index }
\apfs_new_feature:nn { Scale }          { scale }
\apfs_new_feature:nn { JFM }            { jfm }
\apfs_new_feature:nn { Extension }      { ext }
\apfs_new_feature:nn { LoadingSetting } { loading }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Script,Language}
% \opt{Script} 和 \opt{Language} 可接受 Chinese Simplified 等自然名字。
%    \begin{macrocode}
\apfs_new_feature_code:nnn { Script } { script }
  { \@@_extract_alias:nn { script } {#1} }
\apfs_new_feature_code:nnn { Language } { language }
  { \@@_extract_alias:nn { language } {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{RawFeatures}
% 直接设置 GSUB 特性 tag。
%    \begin{macrocode}
\apfs_new_feature_code:nnn { RawFeatures } { feature }
  { \@@_save_gsub_tag:nn { RawFeatures } {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{KanjiForms}
%    \begin{macrocode}
\apfs_new_feature_group:nnnn { KanjiForms } { ResetAll } { }
  {
    Simplified  = smpl ,
    Traditional = trad ,
    JIS1978     = jp78 ,
    JIS1983     = jp83 ,
    JIS1990     = jp90 ,
    JIS2004     = jp04 ,
    Expert      = expt ,
    NLC         = nlck ,
    ResetAll    = { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{CJKShape}
% 兼容 \pkg{fontspec}。
%    \begin{macrocode}
\apfs_define:n
  {
    CJKShape    .meta:n = { KanjiForms = {#1} } ,
    CJKShape  .groups:n = { feature } ,
    CJKShape .default:n = { ResetAll }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{CharacterWidth}
%    \begin{macrocode}
\apfs_new_feature_group:nnnn { CharacterWidth } { ResetAll } { }
  {
    Proportional = pwid ,
    Full         = fwid ,
    Half         = hwid ,
    Third        = twid ,
    Quarter      = qwid ,
    ResetAll     = { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Kana}
%    \begin{macrocode}
\apfs_new_feature_group:nnnn { Kana } { ResetAll } { }
  {
    Horizontal   = hkna ,
    Vertical     = vkna ,
    Proportional = pkna ,
    ResetAll     = { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Ruby}
%    \begin{macrocode}
\apfs_new_feature_group:nnnn { Ruby } { On } { }
  {
    On  = ruby ,
    Off = { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Vertical}
% 只对竖排字体有效。
%    \begin{macrocode}
\apfs_new_feature_group:nnnn { Vertical } { Alternates } { tate }
  {
    Alternates    = vert ,
    RotatedGlyphs = vrt2 ,
    ResetAll      = { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{SizeFeatures}
% \opt{SizeFeatures} 选项的格式与 \pkg{fontspec} 略有差别。
% \begin{syntax}
%   SizeFeatures =
%  \  \{
%  \    ...
%  \    \Arg{size range} \Arg{features} ,
%  \    \Arg{size range} \{ Font = \meta{file name} , \meta{features} \} ,
%  \    ...
%  \  \}
% \end{syntax}
%    \begin{macrocode}
\apfs_define:n
  {
    SizeFeatures .clist_set:N = \l_@@_size_features_clist ,
    SizeFeatures    .groups:n = { feature , size }
  }
%    \end{macrocode}
% \end{macro}
%
% 定义主要选项。
%    \begin{macrocode}
\apfs_define:n
  {
    FontFace            .code:n = \@@_save_fontface:nnn #1 ,
    UprightFont         .code:n = \@@_save_shape:nnn { md } { shape } {#1} ,
    ItalicFont          .code:n = \@@_save_shape:nnn { md } { it } {#1} ,
    SlantedFont         .code:n = \@@_save_shape:nnn { md } { sl } {#1} ,
    BoldFont            .code:n = \@@_save_shape:nnn { bf } { shape } {#1} ,
    BoldItalicFont      .code:n = \@@_save_shape:nnn { bf } { it } {#1} ,
    BoldSlantedFont     .code:n = \@@_save_shape:nnn { bf } { sl } {#1} ,
    UprightFeatures     .code:n = \@@_save_features:nnn { md } { shape } {#1} ,
    ItalicFeatures      .code:n = \@@_save_features:nnn { md } { it } {#1} ,
    SlantedFeatures     .code:n = \@@_save_features:nnn { md } { sl } {#1} ,
    BoldFeatures        .code:n = \@@_save_features:nnn { bf } { shape } {#1} ,
    BoldItalicFeatures  .code:n = \@@_save_features:nnn { bf } { it } {#1} ,
    BoldSlantedFeatures .code:n = \@@_save_features:nnn { bf } { sl } {#1} ,
    FontFace            .groups:n = main ,
    UprightFont         .groups:n = main ,
    ItalicFont          .groups:n = main ,
    SlantedFont         .groups:n = main ,
    BoldFont            .groups:n = main ,
    BoldItalicFont      .groups:n = main ,
    BoldSlantedFont     .groups:n = main ,
    UprightFeatures     .groups:n = main ,
    ItalicFeatures      .groups:n = main ,
    SlantedFeatures     .groups:n = main ,
    BoldFeatures        .groups:n = main ,
    BoldItalicFeatures  .groups:n = main ,
    BoldSlantedFeatures .groups:n = main ,
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_save_gsub_tag:nn}
% 不查表，直接保存。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_gsub_tag:nn #1#2
  {
    \@@_pop_gsub_feature:n {#1}
    \@@_assign:nn { tag } {#2}
    \@@_push_gsub_feature:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_extract_alias:nn}
% 先从表中查询，如果查不到，就不改变。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_extract_alias:nn #1#2
  {
    \@@_assign:nn {#1} {#2}
    \@@_extract_alias_aux:ccc
      { l_@@_ #1 _alias_prop }
      { l_@@_yoko_ #1 _tl }
      { l_@@_tate_ #1 _tl }
  }
\cs_new_protected:Npn \@@_extract_alias_aux:NNN #1#2#3
  {
    \tl_if_eq:NNTF #2#3
      {
        \prop_get:NoNT #1 {#2} #2
          { \tl_set_eq:NN #3#2 }
      }
      {
        \prop_get:NoNT #1 {#2} #2 { }
        \prop_get:NoNT #1 {#3} #3 { }
      }
  }
\cs_generate_variant:Nn \@@_extract_alias_aux:NNN { ccc }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_save_gsub_feature:nn}
% 从表中查找对应的 tag，如果查不到，就报错。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_gsub_feature:nnn #1#2#3
  {
    \@@_pop_gsub_feature:n {#2}
    \tl_if_blank:nTF {#1}
      { \@@_assign:nn { feature } }
      { \tl_set:cn { l_@@_ #1 _feature_tl } }
      {#3}
    \@@_extract_feature:c { g_@@_ #2 _feature_prop }
    \@@_push_gsub_feature:n {#1}
  }
\cs_new_protected:Npn \@@_pop_gsub_feature:n #1
  {
    \prop_pop:NnNTF \l_@@_gsub_feature_prop {#1} \l_@@_tmp_tl
      { \exp_after:wN \@@_assign_feature_tag:nnnn \l_@@_tmp_tl }
      { \@@_assign_feature_tag:nnnn { } { } { } { } }
  }
\cs_new_protected:Npn \@@_push_gsub_feature:n #1
  {
    \prop_put:Nnx \l_@@_gsub_feature_prop {#1}
      {
        { \l_@@_yoko_tag_tl }
        { \l_@@_tate_tag_tl }
        { \l_@@_yoko_feature_tl }
        { \l_@@_tate_feature_tl }
      }
  }
\cs_new_protected:Npn \@@_assign_feature_tag:nnnn #1#2#3#4
  {
    \tl_set:Nn \l_@@_yoko_tag_tl {#1}
    \tl_set:Nn \l_@@_tate_tag_tl {#2}
    \tl_set:Nn \l_@@_yoko_feature_tl {#3}
    \tl_set:Nn \l_@@_tate_feature_tl {#4}
  }
\tl_new:N \l_@@_yoko_tag_tl
\tl_new:N \l_@@_tate_tag_tl
\cs_new_protected:Npn \@@_extract_feature:N #1
  {
    \@@_extract_feature_auxi:nN { yoko } #1
    \tl_if_eq:NNTF \l_@@_yoko_feature_tl \l_@@_tate_feature_tl
      { \tl_set_eq:NN \l_@@_tate_tag_tl \l_@@_yoko_tag_tl }
      { \@@_extract_feature_auxi:nN { tate } #1 }
  }
\cs_new_protected:Npn \@@_extract_feature_auxi:nN #1
  {
    \exp_args:Ncc \@@_extract_feature_auxii:NNN
      { l_@@_ #1 _feature_tl }
      { l_@@_ #1 _tag_tl }
  }
\cs_new_protected:Npn \@@_extract_feature_auxii:NNN #1#2#3
  {
    \tl_if_empty:NTF #1
      { \tl_clear:N #2 }
      {
        \prop_get:NoNF #3 {#1} #2
          { \@@_error:nx { invalid-value } {#1} }
      }
  }
\@@_msg_new:nn { invalid-value }
  { Value~`#1'~is~invalid~for~the~key~`\l_keys_key_tl'. }
\cs_generate_variant:Nn \@@_extract_feature:N { c }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\newfontscript}
% \begin{macro}{\apt_def_script_alias:n}
%    \begin{macrocode}
\cs_new_protected:Npn \apt_def_script_alias:n
  { \prop_set_from_keyval:Nn \l_@@_language_alias_prop }
\NewDocumentCommand \newfontscript { }
  { \prop_put:Nnn \l_@@_script_alias_prop }
\prop_new:N \l_@@_script_alias_prop
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\newfontlanguage}
% \begin{macro}{\apt_def_language_alias:n}
%    \begin{macrocode}
\cs_new_protected:Npn \apt_def_language_alias:n
  { \prop_set_from_keyval:Nn \l_@@_language_alias_prop }
\NewDocumentCommand \newfontlanguage { }
  { \prop_put:Nnn \l_@@_language_alias_prop }
\prop_new:N \l_@@_language_alias_prop
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\apt_def_script_alias:n
  {
     CJK                   = hani ,
     CJK~Ideographic       = hani ,
     Default               = DFLT ,
     Hangul                = hang ,
     Hangul~Jamo           = jamo ,
     Hiragana~and~Katakana = kana ,
     Hiragana/Katakana     = kana ,
     Kana                  = kana ,
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\apt_def_language_alias:n
  {
    Chinese~Hong~Kong      = ZHH ,
    Chinese~Simplified     = ZHS ,
    Chinese~Traditional    = ZHT ,
    Japanese               = JAN ,
    Korean                 = KOR ,
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_semicolon_assign:NNn}
% 将参数 |#3| 中分号前后的内容分别赋值到变量 |#1| 和 |#2| 中。
% 若内容相同，则分号可以省略。若内容为 |-|，则不改变对应变量的当前值。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_semicolon_assign:NNn #1#2#3
  { \@@_assign_auxi:w #3 ; \q_no_value ; \q_stop #1#2 }
\cs_new_protected:Npn \@@_assign_auxi:w #1 ; #2 ; #3 \q_stop
  {
    \use:e
      {
        \@@_assign_auxii:nnNN
          { \tl_trim_spaces:n {#1} }
          { \tl_trim_spaces:n {#2} }
      }
  }
\cs_new_protected:Npn \@@_assign_auxii:nnNN #1#2#3#4
  {
    \str_if_eq:nnF {#1} { - } { \tl_set:Nn #3 {#1} }
    \quark_if_no_value:nTF {#2}
      { \str_if_eq:nnF {#1} { - } { \tl_set_eq:NN #4#3 } }
      { \str_if_eq:nnF {#2} { - } { \tl_set:Nn #4 {#2} } }
  }
\cs_generate_variant:Nn \@@_semicolon_assign:NNn { cc }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_assign:nn}
% 同时保存横排与直排的变量值。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_assign:nn #1
  {
    \@@_semicolon_assign:ccn
      { l_@@_yoko_ #1 _tl }
      { l_@@_tate_ #1 _tl }
  }
\cs_generate_variant:Nn \@@_assign:nn { no }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_assign_font:nn}
% 先将 |*| 号替换掉。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_assign_font:nn #1#2
  {
    \str_if_eq:nnTF {#1} {#2}
      { \@@_assign:nn { font } {#1} }
      {
        \tl_if_blank:nTF {#1}
          { \@@_assign:nn { font } {#2} }
          { \@@_replace_font:nn {#1} {#2} }
      }
  }
\cs_new_protected:Npn \@@_replace_font:nn #1#2
  {
    \tl_set:Nn \l_@@_tmp_tl {#1}
    \tl_replace_all:Nnn \l_@@_tmp_tl { * } {#2}
    \@@_assign:no { font } { \l_@@_tmp_tl }
  }
\cs_generate_variant:Nn \@@_assign_font:nn { o }
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@@_save_fontface:nnn}
% 保存 \opt{FontFace} 选项的值。\opt{FontFace} 选项的格式与 \pkg{fontspec} 一致。
% \begin{syntax}
%   FontFace = \Arg{series}\Arg{shape}\Arg{file name}
%   FontFace = \Arg{series}\Arg{shape}\{ Font = \meta{file name} , \meta{features} \}
% \end{syntax}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_fontface:nnn
  { \@@_save_shape:Nnnn \@@_assign_fontface:nnn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_save_shape:Nnnn}
% 将选项中设置的字形保存到表中。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_shape:Nnnn #1#2#3#4
  { \prop_put:Nnn \l_@@_shape_prop { #2/#3 } { #1 {#2} {#3} {#4} } }
\prop_new:N \l_@@_shape_prop
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_save_shape:nnn}
% \begin{variable}[int]{\l_@@_shape_prop}
% 将 \opt{BoldFont} 等选项的值保存到表中。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_shape:nnn
  {
    \@@_save_shape_aux:nnn
      { \@@_save_shape:Nnnn \@@_assign_shape:nnn }
  }
%    \end{macrocode}
% \end{variable}
% \end{macro}

% \begin{macro}{\@@_save_features:nnn}
% \begin{variable}[int]{\l_@@_features_prop}
% 将 \opt{BoldFeatures} 等选项的值保存到表中。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_features:nnn
  {
    \@@_save_shape_aux:nnn
      { \@@_save_features_aux:nnn }
  }
\cs_new_protected:Npn \@@_save_features_aux:nnn #1#2#3
  { \prop_put:Nnn \l_@@_features_prop { #1/#2 } { {#1} {#2} {#3} } }
\prop_new:N \l_@@_features_prop
%    \end{macrocode}
% \end{variable}
% \end{macro}
%
% \begin{macro}{\@@_save_shape_aux:nnn}
% 辅助函数，用于展开 \tn{bfdefault} 等。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_shape_aux:nnn #1#2#3
  {
    \use:e
      {
        \exp_not:n {#1}
          { \use:c { #2 default } }
          { \use:c { #3 default } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\apfs_set_family:nnn}
% 主要函数。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_set_family:nnn #1#2#3
  {
    \group_begin:
      \tl_set:Nn \l_@@_family_tl {#1}
      \@@_save_shape:nnn { md } { shape } {#3}
      \tl_if_blank:nF {#2} { \@@_set_keys:n {#2} }
      \@@_provide_family_name:n {#3}
      \@@_save_info:onn { \l_@@_family_tl } {#2} {#3}
      \@@_declare_family:
      \@@_declare_shape:n {#3}
      \@@_declare_family_finalise:nn {#2} {#3}
    \group_end:
  }
\cs_new_eq:NN \@@_declare_family_finalise:nn \use_none:nn
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_set_keys:n}
% 主要目的是不保存 \opt{NFSSFamily} 选项。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_set_keys:n #1
  {
    \apfs_set_filter:nnN
      { main , feature } {#1} \l_@@_font_options_clist
    \exp_args:No \apfs_set:n { \l_@@_font_options_clist }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_provide_family_name:n}
% 自动生成 NFSS 族名。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_provide_family_name:n #1
  {
    \tl_if_empty:NT \l_@@_family_tl
      { \@@_provide_family_name_aux:n {#1} }
    \tl_gset_eq:NN \g_apfs_family_tl \l_@@_family_tl
  }
\cs_new_protected:Npn \@@_provide_family_name_aux:n #1
  {
    \tl_set:Nn \l_@@_family_tl {#1}
    \tl_remove_all:Nn \l_@@_family_tl { ~ }
    \prop_gpop:NoNTF \g_@@_family_int_prop
      { \l_@@_family_tl } \l_@@_tmp_tl
      {
        \tl_set:Nx \l_@@_tmp_tl
          { \int_eval:n { \l_@@_tmp_tl + 1 } }
      }
      { \tl_set:Nn \l_@@_tmp_tl { 0 } }
    \prop_gput:Noo \g_@@_family_int_prop
      { \l_@@_family_tl } { \l_@@_tmp_tl }
    \tl_put_right:Nx \l_@@_family_tl { ( \l_@@_tmp_tl ) }
  }
\prop_new:N \g_@@_family_int_prop
\prg_generate_conditional_variant:Nnn \prop_gpop:NnN { No } { TF }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_declare_family:nn}
% 同时声明横排和直排汉字字体族。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_declare_family:
  {
    \@@_declare_family_aux:n { yoko }
    \@@_declare_family_aux:n { tate }
  }
\cs_new_protected:Npn \@@_declare_family_aux:n #1
  {
    \use:e
      {
        \apfs_declare_family:nnn
          { \use:c { l_@@_ #1 _encoding_tl } }
          { \l_@@_family_tl }
          { \exp_not:v { l_@@_ #1 _loading_tl } }
      }
    \tl_clear:c { l_@@_ #1 _loading_tl }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\apfs_declare_family:nnn, \apfs_declare_shape:nnnnnn}
% 我们额外的工作是记录相关信息。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_declare_family:nnn #1#2#3
  {
    \@@_declare_family_hook:nnn {#1} {#2} {#3}
    \apfs_nfss_declare_family:nnn {#1} {#2}
      { \apfs_record_rawfont:n {#2} #3 }
  }
\cs_new_protected:Npn \apfs_declare_shape:nnnnnn #1#2#3#4#5#6
  {
    \@@_declare_shape_hook:nnnnnn {#1} {#2} {#3} {#4} {#5} {#6}
    \apfs_record_shape:nnnn {#1} {#2} {#3} {#4}
    \apfs_nfss_declare_shape:nnnnnn {#1} {#2} {#3} {#4} {#5} {#6}
  }
\cs_new_eq:NN \@@_declare_family_hook:nnn   \use_none:nnn
\cs_new_eq:NN \@@_declare_shape_hook:nnnnnn \use_none:nnnnnn
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\apfs_record_rawfont:n}
% 记录已经被调用的字体名称。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_record_rawfont:n #1
  {
    \prop_gpop:NnNTF \g_@@_defined_rawfont_prop {#1} \l_@@_tmp_tl
      { \tl_put_right:No }
      { \tl_set_eq:NN }
        \l_@@_tmp_tl \font@name
    \prop_gput:Nno \g_@@_defined_rawfont_prop {#1} { \l_@@_tmp_tl }
  }
\prop_new:N \g_@@_defined_rawfont_prop
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\apfs_record_shape:nnnn}
% 记录定义的字体。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_record_shape:nnnn #1#2#3#4
  {
    \prop_gpop:NnNTF \g_@@_defined_shape_prop {#2} \l_@@_tmp_tl
      { \tl_put_right:Nx }
      { \tl_set:Nx }
        \l_@@_tmp_tl { \exp_not:c { #1/#2/#3/#4 } }
    \prop_gput:Nno \g_@@_defined_shape_prop {#2} { \l_@@_tmp_tl }
  }
\prop_new:N \g_@@_defined_shape_prop
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_save_info:nnn}
% 保存字体信息。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_save_info:nnn #1#2#3
  {
    \prop_gpop:NnNT \g_@@_font_file_prop {#1} \l_@@_font_file_tl
      {
        \@@_warning:nn { redefine-family } {#1}
        \@@_remove_defined:n {#1}
      }
    \prop_gput:Nnn \g_@@_font_file_prop {#1} {#3}
    \prop_gput:Nno \g_@@_font_options_prop {#1}
      { \l_@@_font_options_clist }
  }
\@@_msg_new:nn { redefine-family }
  { Redefining~CJKfamily~"#1"~\msg_line_context:. }
\cs_generate_variant:Nn \@@_save_info:nnn { o }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\g_@@_font_file_prop,\g_@@_font_options_prop}
% 保存字体定义时的的基本文件名和选项。
%    \begin{macrocode}
\prop_new:N \g_@@_font_file_prop
\prop_new:N \g_@@_font_options_prop
\clist_new:N \l_@@_font_options_clist
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_remove_defined:n}
% 删除已经被使用的字体，保证新定义生效。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_remove_defined:n #1
  {
    \prop_gpop:NnNT \g_@@_defined_rawfont_prop {#1} \l_@@_tmp_tl
      { \tl_map_function:NN \l_@@_tmp_tl \cs_undefine:N }
    \prop_gpop:NnNT \g_@@_defined_shape_prop {#1} \l_@@_tmp_tl
      { \tl_map_function:NN \l_@@_tmp_tl \@@_remove_shape:N }
  }
\cs_new_protected:Npn \@@_remove_shape:N #1
  {
    \exp_after:wN \cs_undefine:N #1
    \cs_undefine:N #1
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_declare_shape:n}
% 设置表中的字形。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_declare_shape:n #1
  {
    \@@_extract_gsub_feature:
    \prop_map_inline:Nn \l_@@_shape_prop
      { \@@_declare_shape:nNnnnn { ##1 } ##2 {#1} }
    \prop_if_empty:NF \l_@@_features_prop
      { \@@_declare_shape_feature:n {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_declare_shape:Nnnnn}
% 实际声明字形。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_declare_shape:nNnnnn #1#2#3#4#5#6
  {
    \group_begin:
      #2 {#1} {#5} {#6}
      \@@_process_size_features:n {#6}
      \@@_declare_shape:nnn { yoko } {#3} {#4}
      \@@_declare_shape:nnn { tate } {#3} {#4}
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_assign_fontface:nnn}
% 实现 \opt{FontFace} 选项。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_assign_fontface:nnn #1#2#3
  {
    \@@_extract_fontname:n {#2}
    \tl_if_empty:NTF \l_@@_fontname_tl
      { \@@_assign_font:nn {#2} {#3} }
      {
        \@@_assign_font:on { \l_@@_fontname_tl } {#3}
        \apfs_set_features:n {#2}
      }
    \prop_remove:Nn \l_@@_features_prop {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_assign_shape:nnn}
% 实现 \opt{BoldFont} 等选项。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_assign_shape:nnn #1#2#3
  {
    \@@_assign_font:nn {#2} {#3}
    \prop_pop:NnNT \l_@@_features_prop {#1} \l_@@_tmp_tl
      { \exp_after:wN \@@_assign_shape_aux:nnn \l_@@_tmp_tl }
  }
\cs_new_protected:Npn \@@_assign_shape_aux:nnn #1#2#3
  { \tl_if_blank:nF {#3} { \apfs_set_features:n {#3} } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_declare_shape_feature:n, \@@_assign_feature:nnn}
% 实现单独的 \opt{BoldFeatures} 等选项。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_declare_shape_feature:n #1
  {
    \prop_map_inline:Nn \l_@@_features_prop
      {
        \@@_declare_shape:nNnnnn { ##1 }
          \@@_assign_feature:nnn ##2 {#1}
      }
  }
\cs_new_protected:Npn \@@_assign_feature:nnn #1#2#3
  {
    \tl_if_blank:nF {#2}
      {
        \@@_assign:nn { font } {#3}
        \apfs_set_features:n {#2}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_process_size_features:n}
% 实现 \opt{SizeFeatures} 选项。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_process_size_features:n #1
  {
    \clist_if_empty:NTF \l_@@_size_features_clist
      { \@@_process_size_features_auxi: }
      { \@@_process_size_features_auxii:n {#1} }
  }
\cs_new_protected:Npn \@@_process_size_features_auxi:
  {
    \tl_gset:Nn \g_@@_yoko_loading_info_tl { <-> }
    \tl_gset:Nn \g_@@_tate_loading_info_tl { <-> }
    \@@_adjust_jfm:
    \@@_extract_shape_gsub_feature:
    \@@_construct_fontname:n { yoko }
    \@@_construct_fontname:n { tate }
  }
\cs_new_protected:Npn \@@_process_size_features_auxii:n #1
  {
    \tl_gclear:N \g_@@_yoko_loading_info_tl
    \tl_gclear:N \g_@@_tate_loading_info_tl
    \clist_map_inline:Nn \l_@@_size_features_clist
      { \@@_construct_fontname:nnn ##1 {#1} }
  }
\cs_new_protected:Npn \@@_construct_fontname:nnn #1#2#3
  {
    \group_begin:
      \tl_clear:N \l_@@_fontname_tl
      \apfs_set_size_features:n {#2}
      \tl_if_empty:NF \l_@@_fontname_tl
        { \@@_assign_font:on { \l_@@_fontname_tl } {#3} }
      \@@_adjust_jfm:
      \@@_extract_shape_gsub_feature:
      \tl_gput_right:Nn \g_@@_yoko_loading_info_tl { <#1> }
      \tl_gput_right:Nn \g_@@_tate_loading_info_tl { <#1> }
      \@@_construct_fontname:n { yoko }
      \@@_construct_fontname:n { tate }
    \group_end:
  }
\cs_new_protected:Npn \@@_construct_fontname:n #1
  {
    \exp_args:Ncc \@@_process_extension:NN
      { l_@@_ #1 _font_tl }
      { l_@@_ #1 _ext_tl }
    \use:e
      {
        \@@_construct_fontname:Nnnnnnnn
          { \exp_not:c { g_@@_ #1 _loading_info_tl } }
          { \exp_not:v { l_@@_ #1 _scale_tl } }
          { \use:c { l_@@_ #1 _font_tl } }
          { \exp_not:v { l_@@_ #1 _index_tl } }
          { \use:c { l_@@_ #1 _script_tl } }
          { \use:c { l_@@_ #1 _language_tl } }
          { \use:c { l_@@_ #1 _gsub_feature_clist } }
          { \use:c { l_@@_ #1 _jfm_tl } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_adjust_jfm:}
% 如果横排和直排字体的 \opt{JFM} 设置相同，则相应加上 |-h| 和 |-v|。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_adjust_jfm:
  {
    \tl_if_eq:NNT \l_@@_yoko_jfm_tl \l_@@_tate_jfm_tl
      {
        \tl_put_right:Nn \l_@@_yoko_jfm_tl { -h }
        \tl_put_right:Nn \l_@@_tate_jfm_tl { -v }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_extract_gsub_feature:,\@@_extract_shape_gsub_feature:}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_extract_gsub_feature:
  {
    \prop_gset_eq:NN \g_@@_gsub_feature_prop \l_@@_gsub_feature_prop
    \@@_extract_gsub_feature_auxi:
  }
\cs_new_protected:Npn \@@_extract_shape_gsub_feature:
  {
    \cs_if_eq:NNF \g_@@_gsub_feature_prop \l_@@_gsub_feature_prop
      { \@@_extract_gsub_feature_auxi: }
  }
\cs_new_protected:Npn \@@_extract_gsub_feature_auxi:
  {
    \clist_clear:N \l_@@_yoko_gsub_feature_clist
    \clist_clear:N \l_@@_tate_gsub_feature_clist
    \prop_map_inline:Nn \l_@@_gsub_feature_prop
      { \@@_extract_gsub_feature_auxii:nnnn ##2 }
  }
\cs_new_protected:Npn \@@_extract_gsub_feature_auxii:nnnn #1#2#3#4
  {
    \clist_put_right:Nn \l_@@_yoko_gsub_feature_clist {#1}
    \clist_put_right:Nn \l_@@_tate_gsub_feature_clist {#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_construct_fontname:nnnnnnn}
% \ApTeX 的 \tn{jfont} 和 \tn{tfont} 语法如下^^A
% \footnote{\url{https://github.com/clerkma/ptex-ng/blob/master/src/test/test-otf-features.tex}}。
% \begin{verbatim}
% syntax:
%   \jfont\t=name
%   name        = "ot:" file_name file_index? script_lang? gsub_spec? ":" jfm_name
%   file_index  = "[" number "]"
%   script_lang = "(" script? lang? ")"
%   script      = script_tag
%   lang        = "/" lang_tag
%   gsub_spec   = ";" fea_list
%   fea_list    = (fea_tag ",")* [fea_tag | "*"]
%
%   script_tag: https://www.microsoft.com/typography/otspec/scripttags.htm
%   lang_tag:   https://www.microsoft.com/typography/otspec/languagetags.htm
%   fea_tag:    https://www.microsoft.com/typography/otspec/featuretags.htm
%
%   '*' for all gsub featurs
% examples:
%   \jfont\t=ot:yumin.ttf;jp90,hojo:upjisr-h
%   \tfont\t=ot:yumin.ttf;vert:upjisr-v
%   \jfont\t=ot:simsun.ttc[1]:upjisr-h
%   \jfont\t=ot:SourceHanSansTC-Normal.otf:uprml-h
% TODO:
%   GPOS features will be supported in next release.
% \end{verbatim}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_construct_fontname:Nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \tl_gput_right:Nx #1
      {
        \tl_if_empty:nF {#2} { s * [ \fp_eval:n {#2} ] }
        \c_@@_prefix_tl
        #3
        \tl_if_empty:nF {#4} { [ \int_eval:n {#4} ] }
        \tl_if_empty:nF { #5#6 }
          { ( #5 \tl_if_empty:nF {#6} { / #6 } ) }
        \tl_if_empty:nF {#7} { ; #7 }
        : #8
      }
  }
\tl_new:N \l_@@_yoko_loading_info_tl
\tl_new:N \l_@@_tate_loading_info_tl
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_process_extension:NN}
% 如果字体名字已经包含扩展名，就不重复加入。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_process_extension:NN #1#2
  { \tl_if_empty:NF #2 { \@@_extension_auxi:NN #1#2 } }
\cs_new_protected:Npn \@@_extension_auxi:NN #1
  {
    \exp_args:Ne \@@_extension_auxi:nNN
      { \exp_args:No \str_lowercase:n {#1} } #1
  }
\cs_new_protected:Npn \@@_extension_auxi:nNN #1
  {
    \clist_map_inline:Nn \l_@@_extension_clist
      {
        \tl_if_in:nnT { #1 $ } { ##1 $ }
          { \clist_map_break:n { \use_none:nnn } }
      }
    \tl_put_right:No
  }
\clist_new:N \l_@@_extension_clist
\clist_set:Nx \l_@@_extension_clist
  { \tl_to_str:n { .ttf , .otf , .ttc } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_declare_shape:nnn}
% 最后将参数展开后传给 \pkg{NFSS} 的命令。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_declare_shape:nnn #1#2#3
  {
    \use:e
      {
        \apfs_declare_shape:nnnnnn
          { \use:c { l_@@_ #1 _encoding_tl } }
          { \l_@@_family_tl }
          {#2}
          {#3}
          { \exp_not:v { g_@@_ #1 _loading_info_tl } }
          { \exp_not:v { l_@@_ #1 _loading_tl } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% 初始设置 JFM 为 upschrm。
%    \begin{macrocode}
\apfs_set:n { JFM = upschrm-h ; upschrm-v }
%    \end{macrocode}
%
% \begin{macro}{\apfs_switch_family:n, \apfs_family:n}
% 切换字体。
%    \begin{macrocode}
\cs_new_protected:Npn \apfs_switch_family:n #1
  {
    \prop_get:NnNTF \g_@@_font_file_prop {#1} \l_@@_font_file_tl
      { \apfs_family:n }
      { \@@_family_unknown_warning:n }
      {#1}
  }
\cs_generate_variant:Nn \apfs_switch_family:n { e }
\cs_new_protected:Npn \apfs_family:n
  { \tl_set:Nn \k@family }
\cs_new_protected:Npn \apfs_use_family:n #1
  { \tl_set:Nx \k@family {#1} \selectfont }
\tl_new:N \l_@@_font_file_tl
\cs_new_protected:Npn \@@_family_unknown_warning:n #1
  {
    \prop_if_empty:NF \g_@@_font_file_prop
      {
        \seq_if_in:NnF \g_@@_unknown_family_seq {#1}
          {
            \seq_gput_right:Nn \g_@@_unknown_family_seq {#1}
            \@@_warning:nn { family-unknown } {#1}
          }
      }
  }
\seq_new:N \g_@@_unknown_family_seq
\@@_msg_new:nn { family-unknown }
  {
    Unknown~CJK~family~`\@@_msg_family_map:n {#1}'~is~being~ignored.\\
    Try~to~use~`\@@_msg_def_family_map:n {#1}'~to~define~it.
  }
\cs_new:Npn \@@_msg_def_family_map:n #1
  {
    \str_case_e:nnF {#1}
      {
        \CJKrmdefault { \token_to_str:N \setCJKmainfont }
        \CJKsfdefault { \token_to_str:N \setCJKsansfont }
        \CJKttdefault { \token_to_str:N \setCJKmonofont }
      }
      { \token_to_str:N \setCJKfamilyfont \{ #1 \} }
    [...]\{...\}
  }
\cs_new:Npn \@@_msg_family_map:n #1
  {
    \str_case_e:nnF {#1}
      {
        \CJKrmdefault { \token_to_str:N \CJKrmdefault }
        \CJKsfdefault { \token_to_str:N \CJKsfdefault }
        \CJKttdefault { \token_to_str:N \CJKttdefault }
      }
      {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_pass_args:nnnn}
% 传递参数，自带展开功能。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_pass_args:nnnn #1#2#3#4
  { \use:e { #1 { \tl_if_blank:nF {#2} { #2 , } #4 } {#3} } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_preamble_family:n}
% 用在 \tn{setCJKmainfont} 等主要命令之后，确保导言区有 CJK 字体可用。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_preamble_family:n #1
  {
    \str_if_eq:eeT {#1} { \CJKfamilydefault }
      {
        \tl_set:Nn \kanjifamilydefault { \CJKfamilydefault }
        \normalfont
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CJKfamily}
%    \begin{macrocode}
\NewDocumentCommand \CJKfamily { m }
  { \exp_args:Ne \apfs_switch_family:n {#1} \selectfont }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CJKfontspec}
%    \begin{macrocode}
\NewDocumentCommand \CJKfontspec { O { } m O { } }
  { \@@_pass_args:nnnn { \apfs_fontspec:nn } {#1} {#2} {#3} }
\cs_new_protected:Npn \apfs_fontspec:nn #1#2
  {
    \apfs_set_family:nnn { } {#1} {#2}
    \apfs_use_family:n { \g_apfs_family_tl }
  }
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\addCJKfontfeatures}
%    \begin{macrocode}
\NewDocumentCommand \addCJKfontfeatures { m }
  {
    \exp_args:Ne \apfs_add_font_features:nn { \k@family } {#1}
    \tex_ignorespaces:D
  }
\cs_new_protected:Npn \apfs_add_font_features:nn #1
  {
    \prop_get:NnNF \g_@@_font_file_prop {#1} \l_@@_tmp_tl
      { \@@_warning:n { addCJKfontfeatures-ignored } \use_none:nnnn }
    \@@_add_font_features_aux:onn { \l_@@_tmp_tl } {#1}
  }
\cs_new_protected:Npn \@@_add_font_features_aux:nnn #1#2#3
  {
    \prop_get:NnN \g_@@_font_options_prop {#2} \l_@@_font_options_clist
    \clist_put_right:Nx \l_@@_font_options_clist {#3}
    \exp_args:No \apfs_fontspec:nn { \l_@@_font_options_clist } {#1}
  }
\cs_generate_variant:Nn \@@_add_font_features_aux:nnn { o }
\@@_msg_new:nn { addCJKfontfeatures-ignored }
  {
    \token_to_str:N \addCJKfontfeatures \ ignored~\msg_line_context:;
    It~cannot~be~used~with~a~font~that~wasn't~selected~by~apfontspec.
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setCJKfamilyfont}
%    \begin{macrocode}
\NewDocumentCommand \setCJKfamilyfont { m O { } m O { } }
  {
    \@@_pass_args:nnnn
      { \apfs_set_family:nnn {#1} } {#2} {#3} {#4}
  }
\NewDocumentCommand \newCJKfontfamily { O { } m O { } m O { } }
  {
    \tl_set:Nx \l_@@_tmp_tl
      { \tl_if_blank:nTF {#1} { \cs_to_str:N #2 } {#1} }
    \@@_pass_args:nnnn
      { \apfs_set_family:nnn { \l_@@_tmp_tl } } {#3} {#4} {#5}
    \cs_new_protected_nopar:Npx #2
      { \apfs_use_family:n { \g_apfs_family_tl } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\setCJKmainfont,\setCJKsansfont,\setCJKmonofont}
%    \begin{macrocode}
\NewDocumentCommand \setCJKmainfont { O { } m O { } }
  {
    \@@_pass_args:nnnn
      { \apfs_set_family:nnn { \CJKrmdefault } } {#1} {#2} {#3}
    \tl_gset_eq:NN \mcdefault    \g_apfs_family_tl
    \tl_gset_eq:NN \CJKrmdefault \g_apfs_family_tl
    \@@_preamble_family:n { \CJKrmdefault }
  }
\NewDocumentCommand \setCJKsansfont { O { } m O { } }
  {
    \@@_pass_args:nnnn
      { \apfs_set_family:nnn { \CJKsfdefault } } {#1} {#2} {#3}
    \tl_gset_eq:NN \gtdefault    \g_apfs_family_tl
    \tl_gset_eq:NN \CJKsfdefault \g_apfs_family_tl
    \@@_preamble_family:n { \CJKsfdefault }
  }
\NewDocumentCommand \setCJKmonofont { O { } m O { } }
  {
    \@@_pass_args:nnnn
      { \apfs_set_family:nnn { \CJKttdefault } } {#1} {#2} {#3}
    \tl_gset_eq:NN \CJKttdefault \g_apfs_family_tl
    \@@_preamble_family:n { \CJKttdefault }
  }
\@onlypreamble \setCJKmainfont
\@onlypreamble \setCJKsansfont
\@onlypreamble \setCJKmonofont
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\CJKrmdefault,\CJKsfdefault,\CJKttdefault,\CJKfamilydefault}
%    \begin{macrocode}
\tl_new:N \CJKrmdefault
\tl_new:N \CJKsfdefault
\tl_new:N \CJKttdefault
\tl_new:N \CJKfamilydefault
\tl_set:Nn \CJKrmdefault { aprm }
\tl_set:Nn \CJKsfdefault { apsf }
\tl_set:Nn \CJKttdefault { aptt }
\tl_set:Nn \CJKfamilydefault { \CJKrmdefault }
%    \end{macrocode}
% \end{variable}
%
%    \begin{macrocode}
\cs_new_protected:Npn \apfs@meta@family #1#2#3
  {
    \str_if_eq:eeT {#2} {#3}
      { \prepare@family@series@update@kanji {#1} {#3} }
  }
\cs_new_eq:NN \apfs@family \apfs_switch_family:e
\g@addto@macro \@rmfamilyhook
  { \apfs@meta@family { mc } { \mcdefault } { \CJKrmdefault } }
\g@addto@macro \@sffamilyhook
  { \apfs@meta@family { gt } { \gtdefault } { \CJKsfdefault } }
\g@addto@macro \@ttfamilyhook
  { \apfs@family { \CJKttdefault } }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareOption { debug } { \bool_gset_true:N \g_@@_debug_bool }
\bool_new:N \g_@@_debug_bool
\ProcessOptions \scan_stop:
%    \end{macrocode}
%
%    \begin{macrocode}
\bool_if:NF \g_@@_debug_bool
  { \file_input_stop: }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_gset_protected:Npn \@@_declare_family_finalise:nn #1#2
  {
    \seq_gput_left:Nn \g_@@_debug_seq { Options {#1} }
    \seq_gput_left:Nn \g_@@_debug_seq { Font {#2} }
    \seq_show:N \g_@@_debug_seq
    \seq_gclear:N \g_@@_debug_seq
  }
\cs_gset_protected:Npn \@@_declare_family_hook:nnn #1#2#3
  {
    \seq_gput_right:Nn \g_@@_debug_seq
      { Family {#1} {#2} {#3} }
  }
\cs_gset_protected:Npn \@@_declare_shape_hook:nnnnnn #1#2#3#4#5#6
  {
    \seq_gput_right:Nn \g_@@_debug_seq
      { Shape {#1} {#2} {#3} {#4} {#5} {#6} }
  }
\seq_new:N \g_@@_debug_seq
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \Finale
%
% \endinput
%
% \DisableImplementation
%
% \begin{implementation}
%
%    \begin{macrocode}
%<*test>
%% !TeX program  = ApLaTeX
%% !TeX encoding = UTF-8

\documentclass{article}

\usepackage{apfontspec}

\setCJKmainfont{SourceHanSerif}
  [
    Extension           = .ttc,
    RawFeature          = - ; vert ,
    UprightFeatures     = { Index = 6  } ,
    ItalicFeatures      = { Index = 10 } ,
    SlantedFeatures     = { Index = 14 } ,
    BoldFeatures        = { Index = 18 } ,
    BoldItalicFeatures  = { Index = 22 } ,
    BoldSlantedFeatures = { Index = 26 } ,
  ]


\makeatletter
\def\TEXT{“中国智造，惠及全球。”}
\protected@edef\TEXT{%
  \textup{\TEXT}\par
  \textit{\TEXT}\par
  \textsl{\TEXT}\par}
\protected@edef\TEXT{\begingroup
  \mdseries\TEXT\par
  \bfseries\TEXT\par\endgroup}
\makeatother

\begin{document}

\TEXT

\clearpage
\begingroup\edef\x{\endgroup
  \pdfpageheight=\the\pdfpagewidth\space
  \pdfpagewidth=\the\pdfpageheight\space}\x
\tate

\TEXT

\end{document}
%</test>
%    \end{macrocode}
%
% \end{implementation}
%
%
\endinput
